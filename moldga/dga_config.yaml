box_sizes:
  niw_core: -1 # Number of bosonic frequencies used from G2(w,v,v'); default: -1 (all)
  niv_core: -1 # Number of fermionic frequencies used from G2(w,v,v'); default: -1 (all)
  niv_shell: 0 # Number of fermionic frequencies used for explicit asymptotics. If left at 0, no asymptotics are used. Default: 0

lattice:
  symmetries: "two_dimensional_square" # Specify lattice symmetry group. For availability, check out the file 'brillouin_zone.py'
  type: "from_wannier90" # Specifies the hopping elements, either from a wannier90 file 'from_wannier90', from a hk file 'from_wannierHK' or from tight-binding parameters 't_tp_tpp'
  hr_input: "/path/to/file" # full path to the wannier_hr.dat/wannier.hk file or list of tight-binding parameters [t, tp, tpp] (only for single-orbital)
  interaction_type: "one_band_from_dmft" # Type of interaction. Available: ['one_band_from_dmft', 'kanamori_from_dmft', 'custom'].
  # If 'one_band_from_dmft' or if interaction_type is left empty, we use the single-band interaction from DMFT. If 'kanamori_from_dmft', the interaction is parsed from the DMFT
  # calculation. If 'custom', please specify the full path to a file in 'interaction_input' containing orbital and spacial entries for the interaction matrix
  # (similar to how a wannier_hr.dat file is structured, but with 4 orbital indices).
  interaction_input: "" # Full path to the interaction file if interaction_type is 'custom', otherwise the interaction data will be taken from DMFT
  nk: [ 16, 16, 1 ] # Number of k-points in x, y and z-direction. Default: [ 16, 16, 1 ]
  #nq: [ 16, 16, 1 ] # Number of q-points in x, y and z-direction. Default: [ 16, 16, 1 ]. If left empty, nq is set to nk

self_consistency:
  max_iter: 20 # Maximum number of iterations
  save_iter: True # If True, the code will save the self-consistency data of the self-energy for each iteration
  epsilon: 1e-4 # Convergence criterion of the self-energy for the first (niv_core / 5) frequencies
  mixing: 0.2 # Linear Mixing parameter for the self-energy: sigma_new = mixing * sigma_new + (1 - mixing) * sigma_old. Will be
  # used in every iteration if the mixing strategy is set to 'linear' and only for the first couple iterations if the mixing strategy is set to "pulay".
  mixing_strategy: "linear" # Available mixing strategies: "linear", "pulay". Note that "pulay" will only work if "save_iter" here and
  # "save_quantities" in the output section below are set to true.
  mixing_history_length: 3 # Number of previous iterations used for Pulay mixing. Default: 3
  previous_sc_path: "" # Path to the previous self-consistency folder. If not specified, the code will start a new calculation from scratch. If specified,
  # the code will start from the last iteration of the previous calculation and does max_iter steps on top

lambda_correction:
  perform_lambda_correction: False # If True, the code will perform a lambda correction and not a self-consistency scheme. This is only possible for single-orbital systems!
  type: "spch" # available types of lambda correction: 'spch' (both density and magnetic channel) or 'sp' (magnetic channel only)

dmft_input:
  type: "w2dyn" # Input format. Available is 'w2dyn'
  input_path: "./" # Folder containing the input files. Default: current directory
  fname_1p: "1p-data.hdf5" # Filename of the one-particle DMFT calculation; default: 1p-data.hdf5
  fname_2p: "g4iw_sym.hdf5" # Name of the two-particle DMFT calculation; default: g4iw_sym.hdf5
  do_sym_v_vp: True # If True, the code will symmetrize G2 from DMFT in the v and vp indices

eliashberg:
  perform_eliashberg: False # If True, the code will perform a power iteration to solve the linearized Eliashberg equation for the superconducting eigenvalues and gap functions
  save_pairing_vertex: False # if true, saves the s/t pairing vertices Gamma(qvv') for the irreducible BZ to files. Attention: this could be a large file!
  save_fq: False # If True, saves the full d/m vertex F(qvv') for the irreducible BZ to files. Attention: this could be a large file!
  n_eig: 4 # Number of eigenvalues and eigenvectors to be calculated. Default: 4
  epsilon: 1e-6 # Convergence criterion for the eigenvalues and eigenvectors
  symmetry: "random" # Symmetry of the gap function that will be used as a starting point for the power iteration. Available: p-wave-x, p-wave-y, d-wave, random
  include_local_part: False # If True, the local part of the pairing vertex is included in the Eliashberg calculation. This is only relevant if one might expect s-wave symmetry.
  # setting this to True will reduce the frequency box of the pairing vertex slightly due to an additional frequency shift that is necessary.
  subfolder_name: "Eliashberg" # name for the subfolder where certain outputs are generated

poly_fitting:
  do_poly_fitting: True # If True, the code will perform a polynomial fit of the non-local self-energy and the Green's function
  n_fit: -1 # Number of Matsubara frequencies used for fit; default: -1 (niv_core + 40)
  o_fit: 8 # Polynomial order used for the fit; default: 8

output:
  output_path: "./" # Path, where the DGA output folders are created. If not specified, the output is created in the input folder directory of the DMFT files
  save_quantities: True # If True, the code will save several quantities into the output folder
  do_plotting: True # If True, the code will plot some results into the output folder
  plotting_subfolder_name: "Plots" # name for the subfolder where the plots are saved
